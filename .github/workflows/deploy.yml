name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./app
        load: true
        push: false
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/webapp:latest
        no-cache: true
        platforms: linux/amd64

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Format Status
      if: steps.fmt.outcome == 'failure'
      run: |
        echo "Terraform files need formatting. Run 'terraform fmt' locally and commit changes."
        exit 1

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: terraform plan
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      run: terraform apply -auto-approve

    - name: Setup SSH for Ansible
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deployer-key
        chmod 600 ~/.ssh/deployer-key
        ssh-keyscan -H 13.61.9.223 >> ~/.ssh/known_hosts

    - name: Run Ansible Playbook
      env:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      run: ansible-playbook -i ansible/inventory.ini ansible/playbook.yml --private-key ~/.ssh/deployer-key -vv

    - name: Verify Deployment
      run: |
        echo "Waiting for application to be available..."
        sleep 30
        PUBLIC_IP=$(terraform output -raw public_ip)
        echo "Server IP: $PUBLIC_IP"
        curl -f http://$PUBLIC_IP
